# microservice specific routes

POST        /register                     controllers.RegistrationController.register()

GET         /subscribe                    controllers.SubscriptionController.get()
POST        /subscribe                    controllers.SubscriptionController.subscribe()
PUT         /subscribe                    controllers.SubscriptionController.updateSubscription()

POST        /submission/assumed/submit							controllers.AssumedReportingController.submit()
GET         /submission/assumed/:operatorId/:reportingPeriod    controllers.AssumedReportingController.get(operatorId: String, reportingPeriod: Year)
DELETE      /submission/assumed/:operatorId/:reportingPeriod    controllers.AssumedReportingController.delete(operatorId: String, reportingPeriod: Year)
GET         /submission/assumed                                 controllers.AssumedReportingController.list()

PUT         /submission/start                       controllers.SubmissionController.start(id: Option[String] ?= None)
GET         /submission/:id                         controllers.SubmissionController.get(id: String)
POST        /submission/:id/start-upload            controllers.SubmissionController.startUpload(id: String)
POST        /submission/:id/upload-success          controllers.SubmissionController.uploadSuccess(id: String)
POST        /submission/:id/upload-failed           controllers.SubmissionController.uploadFailed(id: String)
POST        /submission/:id/submit                  controllers.SubmissionController.submit(id: String)
POST        /submission/delivered/list              controllers.SubmissionController.listDeliveredSubmissions()
GET         /submission/undelivered/list            controllers.SubmissionController.listUndeliveredSubmissions()
GET         /submission/:id/errors                  controllers.CadxValidationErrorController.getCadxValidationErrors(id: String)
POST        /sdes/submission/callback               controllers.SdesSubmissionCallbackController.callback()
POST        /dprs/validation-result                 controllers.SubmissionResultCallbackController.callback()

POST        /platform-operator                  controllers.PlatformOperatorController.create()
PUT         /platform-operator                  controllers.PlatformOperatorController.update()
DELETE      /platform-operator/:operatorId      controllers.PlatformOperatorController.delete(operatorId: String)
GET         /platform-operator                  controllers.PlatformOperatorController.get()
GET         /platform-operator/:operatorId      controllers.PlatformOperatorController.getOne(operatorId: String)

GET         /pending-enrolment              controllers.PendingEnrolmentController.get()
POST        /pending-enrolment              controllers.PendingEnrolmentController.save()
DELETE      /pending-enrolment              controllers.PendingEnrolmentController.remove()

GET         /confirmed/business-details/:operatorId             controllers.ConfirmedDetailsController.businessDetails(operatorId: String)
POST        /confirmed/business-details                         controllers.ConfirmedDetailsController.saveBusinessDetails()
GET         /confirmed/reporting-notifications/:operatorId      controllers.ConfirmedDetailsController.reportingNotifications(operatorId:String)
POST        /confirmed/reporting-notifications                  controllers.ConfirmedDetailsController.saveReportingNotifications()
GET         /confirmed/contact-details                          controllers.ConfirmedDetailsController.contactDetails()
POST        /confirmed/contact-details                          controllers.ConfirmedDetailsController.saveContactDetails()

GET         /admin/blocked-submissions      controllers.AdminController.getBlockedSubmissions()
GET         /admin/cadx-result/work-items   controllers.AdminController.getCadxResultWorkItems(statuses: Set[ProcessingStatus] ?= Set.empty, limit: Int ?= 10, offset: Int ?= 0)
