# Copyright 2024 HM Revenue & Customs
#
# Licensed under the Apache License, Version 2.0 (the "License");
# you may not use this file except in compliance with the License.
# You may obtain a copy of the License at
#
#     http://www.apache.org/licenses/LICENSE-2.0
#
# Unless required by applicable law or agreed to in writing, software
# distributed under the License is distributed on an "AS IS" BASIS,
# WITHOUT WARRANTIES OR CONDITIONS OF ANY KIND, either express or implied.
# See the License for the specific language governing permissions and
# limitations under the License.

include "backend.conf"

# This is the main configuration file for the application.
# ~~~~~

appName = digital-platform-reporting

play.modules.enabled += "uk.gov.hmrc.play.bootstrap.AuthModule"
play.modules.enabled += "uk.gov.hmrc.play.bootstrap.HttpClientV2Module"
play.modules.enabled += "config.Module"
play.modules.enabled += "uk.gov.hmrc.mongo.play.PlayMongoModule"

# The application languages
# ~~~~~
play.i18n.langs = ["en"]

# Router
# ~~~~~
# Define the Router object to use for this application.
# This router will be looked up first when the application is starting up,
# so make sure this is the entry point.
# Furthermore, it's assumed your route file is named properly.
# So for an application router like `my.application.Router`,
# you may need to define a router file `conf/my.application.routes`.
# Default to Routes in the root package (and conf/routes)
# !!!WARNING!!! DO NOT CHANGE THIS ROUTER
play.http.router = prod.Routes

# Controller
# ~~~~~
# By default all controllers will have authorisation, logging and
# auditing (transaction monitoring) enabled.
# The below controllers are the default exceptions to this rule.

controllers {
}

# Microservice specific config

mongodb {
  submission.ttl = 30 days
  cadx-validation-errors.ttl = 30 days
  uri = "mongodb://localhost:27017/digital-platform-reporting"
}

microservice {
  services {

    auth {
      host = localhost
      port = 8500
    }

    register-with-id {
      protocol = http
      host = localhost
      port = 20000
      bearer-token = abc123
      basePath = "/digital-platform-reporting-stubs"
    }

    register-without-id {
      protocol = http
      host = localhost
      port = 20000
      bearer-token = abc123
      basePath = "/digital-platform-reporting-stubs"
    }

    subscribe {
      protocol = http
      host = localhost
      port = 20000
      basePath = "/digital-platform-reporting-stubs"

      bearerTokens {
        userSubscription = abc123
        readContacts = abc123
        updateContacts = abc123
      }
    }
    
    update-platform-operator {
      protocol = http
      host = localhost
      port = 20000
      bearer-token = abc123
      basePath = "/digital-platform-reporting-stubs"
    }
    
    view-platform-operator {
      protocol = http
      host = localhost
      port = 20000
      bearer-token = abc123
      basePath = "/digital-platform-reporting-stubs"
    }

    report-submission {
      protocol = http
      host = localhost
      port = 20000
      bearer-token = abc123
      basePath = "/digital-platform-reporting-stubs"
    }

    sdes {
      protocol = http
      host = localhost
      port = 9191
      basePath = "/sdes-stub"
    }
  }
}

validation {
  schema-path = "schemas/DPIXML_v1.08.xsd"
}

sdes {
  client-id = "client-id"
  information-type = "information-type"
  recipient-or-sender = "digital-platform-reporting"
  max-failures = 10
  call-timeout = 30 seconds
  reset-timeout = 10 minutes
  submission.retry-after = 10 minutes
  size-threshold = 3000000
}

workers {
  sdes-submission {
    initial-delay = 1m
    interval = 10s
  }
}

cadx.incoming-bearer-token = "some-token"